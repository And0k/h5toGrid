[in]
#Binary data path mask:
path = \\Artemeva\incoming\CTD_Brown_Mark3\2017-03-23_1349.dat
#d:\WorkData\_source\AtlanticOcean\161113_Strahov\CTD_Mark3\*.bin
#d:\WorkData\_source\AtlanticOcean\161113_Strahov\CTD_Mark3\161130_0006.bin

# Files search is doing recursively, so to exclude some sub dirs/files specify them here:
exclude_dirs_endswith_list = bad, test, TEST ; default: bad, test
exclude_files_endswith_list = test.bin ; default: coef.txt

dt_from_utc_hours = 0 ; UTC time offset in date from file in this computer zone
#file_name_start_time_format= %Y-%m-%d_%H%M ; %Y/%y - 4/2 digit (see datetime.strptime)
#b_time_fromtimestamp= True  ; if False extruct date from last part of file name: yyyy-mm-dd-HHMM
; if True then uses file modification time instead name
fs_float = 31.25 ;[Hz] T= 32ms
delimiter_hex_list = 0000000F, 000000E0, 000000F0, 000080F0, 0000800F, 008000F0, 0080000F, 008080F0, 0080800F, 808000F0, 8080000F, 808080F0, 8080800F, 800000F0, 8000000F, 800080F0, 8000800F
# data_words_integer= ; same as header items
data_word_len_integer = 2 ;[bytes] => data type is int16
header = Pres,Temp,Cond,signs
#dtype= uint32 ;uint16 - auto
b_byte_order_is_big_endian = False

b_incremental_update = True

[filter]
#min_Temp= 2000  ;  1/0.0005
#max_Temp= 60000 ; 30/0.0005
#min_Cond= 10000 ;  10/0.001
#max_Cond= 60000 ;  60/0.001
#min_P= 0        ;    10/0.1
#max_P= 60000    ;  6000/0.1
#min_date= 02.08.2016 11:49:00 ; UTC, not output data < min_date
#max_date= 01.01.2017 00:00:00 ; UTC, not output data > max_date

[out]
table = CTD_Brown
# todo?
data_fun1_out_name = Temp
data_fun1_in_names = Temp, signs
data_fun1 = lambda data, in_names: np.bitwise_xor(np.left_shift(data[in_names[1]]&2, 14), data[in_names[0]])

b_insert_separator = True ; insert row filled with NaNs before each next file data start
logfield_filename_len_integer = 255

b_reuse_temporary_tables = False ; Warning! If True and b_incremental_update= True then not replace temporary file with result before proc.
; Warning! Set False only if temporary storage already have good data!
[program]
log = log/binConvertBrown.log ; log operations